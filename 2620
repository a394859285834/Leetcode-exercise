//2667. Create Hello World Function
//Write a function createHelloWorld. It should return a new function that always returns "Hello World". 

let createHelloWorld = function(){
    return() => "Hello World";
}

//2620. Counter
//Given an integer n, return a counter function. This counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).

const createCounter = n => () => n++;

//2704. To Be Or Not To Be
//Write a function expect that helps developers test their code. It should take in any value val and return an object with the following two functions.
//toBe(val) accepts another value and returns true if the two values === each other. If they are not equal, it should throw an error "Not Equal".
//notToBe(val) accepts another value and returns true if the two values !== each other. If they are equal, it should throw an error "Equal".

function expect(val) {
    return {
        toBe(expected) {
            if (val === expected) {
                return true;
            } else {
                throw new Error("Not Equal");
            }
        },
        notToBe(expected) {
            if (val !== expected) {
                return true;
            } else {
                throw new Error("Equal");
            }
        }
    };
}

/*2665. Counter II
Write a function createCounter. It should accept an initial integer init. It should return an object with three functions.
The three functions are:
    increment() increases the current value by 1 and then returns it.
    decrement() reduces the current value by 1 and then returns it.
    reset() sets the current value to init and then returns it.*/

type Counter = {
  increment: () => number;
  decrement: () => number;
  reset: () => number;
};

function createCounter(init: number): Counter {
  let currentValue = init;

  return {
    increment: () => {
      currentValue += 1;
      return currentValue;
    },
    decrement: () => {
      currentValue -= 1;
      return currentValue;
    },
    reset: () => {
      currentValue = init;
      return currentValue;
    }
  };
}

/*2635. Apply Transform Over Each Element in Array
Given an integer array arr and a mapping function fn, return a new array with a transformation applied to each element.
The returned array should be created such that returnedArray[i] = fn(arr[i], i).
Please solve it without the built-in Array.map method.*/

/**
 * @param {number[]} arr
 * @param {Function} fn
 * @return {number[]}
 */
var map = function(arr, fn) {
    const returnedArray = new Array(arr.length);
    for (let i = 0; i < arr.length; i++) {
        returnedArray[i] = fn(arr[i], i);
    }
    return returnedArray;
};

/*2634. Filter Elements from Array
Given an integer array arr and a filtering function fn, return a filtered array filteredArr.
The fn function takes one or two arguments:
    arr[i] - number from the arr
    i - index of arr[i]
filteredArr should only contain the elements from the arr for which the expression fn(arr[i], i) evaluates to a truthy value. A truthy value is a value where Boolean(value) returns true.
Please solve it without the built-in Array.filter method.*/

/**
 * @param {number[]} arr
 * @param {Function} fn
 * @return {number[]}
 */
var filter = function(arr, fn) {
    const filteredArr = [];
    for (let i = 0; i < arr.length; i++) {
        if (fn(arr[i], i)) {
            filteredArr.push(arr[i]);
        }
    }
    return filteredArr;
};

//https://leetcode.com/problems/running-sum-of-1d-array/

function runningSum(nums) {
  for (let i = 1; i < nums.length; i++) {
    nums[i] += nums[i - 1];
  }
  return nums;
}

//https://leetcode.com/problems/root-equals-sum-of-children/

function checkTree(root) {
  return root.val === root.left.val + root.right.val;
}

//https://leetcode.com/problems/invert-binary-tree/

function invertTree(root: TreeNode | null): TreeNode | null {
    if (root === null){
      return null
    }
    var right = root.right;
    root.right = invertTree(root.left);
    root.left = invertTree(right);
    return root
    };

//https://leetcode.com/problems/richest-customer-wealth/submissions/1515131107/

const maximumWealth = (accounts: number[][]): number =>
  Math.max(...accounts.map((holder) => holder.reduce((a, b) => a + b)));

//https://leetcode.com/problems/fizz-buzz/submissions/1517071334/

function fizzBuzz(n: number): string[] {
  const answer: string[] = [];
  for (let i = 1; i <= n; i++) {
    if (i % 3 === 0 && i % 5 === 0) {
      answer.push("FizzBuzz");
    } else if (i % 3 === 0) {
      answer.push("Fizz");
    } else if (i % 5 === 0) {
      answer.push("Buzz");
    } else {
      answer.push(i.toString());
    }
  }
  return answer;
}

//https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/

function numberOfSteps(num: number): number {
  let steps: number = 0;
  while (num > 0){
    if (num % 2 === 0){
      num = num / 2;
    } else {
      num -= 1;
    }
    steps++;
  }
  return steps;
}

//https://leetcode.com/problems/middle-of-the-linked-list/submissions/1517246359/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     val: number
 *     next: ListNode | null
 *     constructor(val?: number, next?: ListNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.next = (next===undefined ? null : next)
 *     }
 * }
 */

function middleNode(head: ListNode | null): ListNode | null {
    let slow: ListNode | null = head;
    let fast: ListNode | null = head;
    
    while (fast !== null && fast.next !== null) {
        slow = slow!.next;
        fast = fast.next.next;
    }
    
    return slow;
}

//https://leetcode.com/problems/ransom-note/submissions/1517319517/

function canConstruct(ransomNote: string, magazine: string): boolean {
  const charCount: { [key: string]: number } = {};

  // Count characters in magazine
  for (const char of magazine) {
    charCount[char] = (charCount[char] || 0) + 1;
  }

  // Check if ransomNote can be constructed
  for (const char of ransomNote) {
    if (!charCount[char]) {
      return false;
    }
    charCount[char]--;
  }

  return true;
}

//https://leetcode.com/problems/array-reduce-transformation/?envType=study-plan-v2&envId=30-days-of-javascript

type Fn = (accum: number, curr: number) => number

function reduce(nums: number[], fn: Fn, init: number): number {
    let val = init;
    for (let i = 0; i < nums.length; i++) {
        val = fn(val, nums[i]);
    }
    return val;
}

//https://leetcode.com/problems/function-composition/?envType=study-plan-v2&envId=30-days-of-javascript

type F = (x: number) => number;

function compose(functions: F[]): F {
    return function(x) {
      return functions.reduceRight((acc, fn) => fn(acc), x);
    }
};

//https://leetcode.com/problems/return-length-of-arguments-passed/submissions/1518151008/?envType=study-plan-v2&envId=30-days-of-javascript

function argumentsLength(...args: any[]): number {
    return args.length;
}

